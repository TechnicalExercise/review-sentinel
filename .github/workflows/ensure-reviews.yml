# This is a basic workflow to help you get started with Actions

name: Ensure review policy in new repos

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  repository_dispatch:
    types:
      - created

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      repo-name:
        description: 'Name of the newly created repository'
        required: true
        default: 'repo1'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  ensure-review:
    name: 'Ensure review process for ${{ github.event.client_payload.repo }}'
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Get Token
        id: get_workflow_token
        uses: peter-murray/workflow-application-token-action@v1
        with:
          application_id: ${{ secrets.APPLICATION_ID }}
          application_private_key: ${{ secrets.APPLICATION_PRIVATE_KEY }}
      
      - name: Show context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"
          
      - name: Get repo
        id: get-repo
        uses: octokit/request-action@v2.x
        env:
          GITHUB_TOKEN: ${{ steps.get_workflow_token.outputs.token }} # ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.client_payload.repo }}
        with:
          route: GET /repos/{owner}/{repo}
          owner: ${{ env.OWNER }}
          repo: ${{ env.REPO }} 
      
      - name: Show the repo data # should be default_branch
        run: |
          echo 'Default branch: ${{ fromJson(steps.get-repo.outputs.data).default_branch }}'

      - name: Get default branch protection from template repo
        id: get-branch-protection-template
        uses: octokit/request-action@v2.x
        env:
          GITHUB_TOKEN: ${{ steps.get_workflow_token.outputs.token }} # ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: template
          BRANCH: main
        with:
          route: GET /repos/{owner}/{repo}/branches/{branch}/protection
          owner: ${{ env.OWNER }}
          repo: ${{ env.REPO }} 
          branch: ${{ env.BRANCH }}
      
      - name: Show template repo branch protection rules
        id: template-repo-rules
        run: | 
          echo "rules: ${{ toJson(fromJson(steps.get-branch-protection-template.outputs.data)) }}"
      
      - name: Create content and branch if the repo is empty
        env:
          GITHUB_TOKEN: ${{ steps.get_workflow_token.outputs.token }} # ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.client_payload.repo }}          
        run: |
          git clone https://${{github.actor}}:${{env.GITHUB_TOKEN}}@github.com/${{env.OWNER}}/${{env.REPO}}.git
          cd ${{env.REPO}}
          
          # Check if the repo is empty
          if [ "$(ls -A .)" ]; then
            git config user.name "${{github.actor}}"
            git config user.email "${{github.actor}}@${{github.repository_owner}}.com"
            
            echo "Creating and committing README.md file"
            
            echo "# Welcome to the ${{env.REPO}} repository" > .\README.md
            git add .\README.md
            git commit -m "Readme file added by Repo-Protector"
            git push
          else
            echo "Repository not empty; doing nothing"
          fi
      
      - name: Set branch protection
        id: set-protection
        uses: octokit/request-action@v2.x
        env:
          GITHUB_TOKEN: ${{ steps.get_workflow_token.outputs.token }} # ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.client_payload.repo }}
          BRANCH: ${{ fromJson(steps.get-repo.outputs.data).default_branch }}
        with:
          route: PUT /repos/{owner}/{repo}/branches/{branch}/protection
          owner: ${{ env.OWNER }}
          repo: ${{ env.REPO }}       
          branch: ${{ env.BRANCH }}
          required_status_checks: ${{ toJson(fromJson(steps.get-branch-protection-template.outputs.data).required_status_checks) }}
          restrictions: ${{ toJson(fromJson(steps.get-branch-protection-template.outputs.data).restrictions) }}
          required_pull_request_reviews: ${{ toJson(fromJson(steps.get-branch-protection-template.outputs.data).required_pull_request_reviews) }}
          enforce_admins: ${{ toJson(fromJson(steps.get-branch-protection-template.outputs.data).enforce_admins.enabled) }}
          required_linear_history: ${{ toJson(fromJson(steps.get-branch-protection-template.outputs.data).required_linear_history.enabled) }}
          allow_force_pushes: ${{ toJson(fromJson(steps.get-branch-protection-template.outputs.data).allow_force_pushes.enabled) }}
          allow_deletions: ${{ toJson(fromJson(steps.get-branch-protection-template.outputs.data).allow_deletions.enabled) }}
          required_conversation_resolution: ${{ toJson(fromJson(steps.get-branch-protection-template.outputs.data).required_conversation_resolution.enabled) }}
          
      - uses: dacbd/create-issue-action@v1
        name: Create Issue about protection rules
        env:
          GITHUB_TOKEN: ${{ steps.get_workflow_token.outputs.token }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.client_payload.repo }}
          BRANCH: ${{ fromJson(steps.get-repo.outputs.data).default_branch }}
        with:
          title: Protection rules for ${{env.BRANCH}}
          token: ${{ env.GITHUB_TOKEN }}
          org: ${{ env.OWNER }}
          repo: ${{ env.REPO }}
          assignees: ${{github.actor}}
          body: |
            Branch Protection rules:
            ------------------------
            ${{ steps.get-branch-protection-template.outputs.data }}
            
            @${{ github.actor }}
#       - name: Notify me of branch protection
#         uses: octokit/request-action@v2.x
#         env:
#           GITHUB_TOKEN: ${{ steps.get_workflow_token.outputs.token }} # ${{ secrets.GITHUB_TOKEN }}
#           OWNER: ${{ github.repository_owner }}
#           REPO: ${{ github.event.client_payload.repo }}
#           BRANCH: ${{ fromJson(steps.get-repo.outputs.data).default_branch }}
#         with:
#           route: POST /repos/{owner}/{repo}/issues
#           owner: ${{ env.OWNER }}
#           repo: ${{ env.REPO }}             
#           title: "Protection rules for ${{env.BRANCH}}"
#           body: "${{ steps.get-branch-protection-template.outputs.data }}"
#           assignees: ["devopsjester"]
      
      
      
      
      
      
      
      
